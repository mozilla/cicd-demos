#!/usr/bin/env bash

set -euo pipefail

# Always clean up docker-compose services, even on failure or Ctrl-C.
cleanup() {
  echo "Spinning down docker resources..."
  docker compose --progress=quiet down || true
}
trap cleanup EXIT

# --- Config -------------------------------------------------------------------

IMAGE_NAME="go-demo"

LBHEARTBEAT_URL="${LBHEARTBEAT_URL:-http://localhost:8000/__lbheartbeat__}"
HEARTBEAT_URL="${HEARTBEAT_URL:-http://localhost:8000/__heartbeat__}"
VERSION_URL="${VERSION_URL:-http://localhost:8000/__version__}"


assert_http_200() {
  # Usage: assert_http_200 "<label>" "<url>"
  local label="$1"
  local url="$2"

  local code
  code="$(curl --silent --show-error --output /dev/null --write-out '%{http_code}' "$url")"

  if [[ "$code" != "200" ]]; then
    echo "$label check failed: expected 200, got $code"
    return 1
  else
    echo "$label check successful!"
  fi
}

# --- Image size check ---------------------------------------------------------
EXPECTED_IMAGE_SIZE_BYTES=30000000 # 30mb
ACTUAL_IMAGE_SIZE_BYTES="$(docker image inspect --format='{{.Size}}' "$IMAGE_NAME")"
# Check the that the image is in a general size range
# The size here is different than the virtual container size as reported by
# `docker image ls`. This size essentially represents the layers on top of the
# base image that we're "responsible for".
if (( ACTUAL_IMAGE_SIZE_BYTES > EXPECTED_IMAGE_SIZE_BYTES )); then
  echo "Image too large: ${ACTUAL_IMAGE_SIZE_BYTES} bytes (expected <= ${EXPECTED_IMAGE_SIZE_BYTES})"
  exit 1
else
  echo "Image size OK: ${ACTUAL_IMAGE_SIZE_BYTES} bytes (expected <= ${EXPECTED_IMAGE_SIZE_BYTES})"
fi

# --- Start only server container and check LB heartbeat -----------
docker compose --progress=quiet up --detach --wait --no-deps web
assert_http_200 "LB heartbeat" "$LBHEARTBEAT_URL"

# --- Check version endpoint ------------------------------------------
VERSION_RESPONSE="$(curl --silent --show-error "$VERSION_URL")"
for field in "source" "version" "commit" "build"; do
  VALUE="$(echo "$VERSION_RESPONSE" | jq -r ".${field}" 2>/dev/null || echo "")"
  if [[ -z "$VALUE" ]] || [[ "$VALUE" == "null" ]]; then
    echo "Version check failed: field '$field' is missing or empty"
    exit 1
  fi
done
echo "Version object present and matches schema!"

# --- Start all services and check app heartbeat -------------------
docker compose --progress=quiet up --detach --wait
assert_http_200 "App heartbeat" "$HEARTBEAT_URL"

echo "All checks passed!"
